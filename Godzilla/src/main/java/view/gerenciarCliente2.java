/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import com.formdev.flatlaf.intellijthemes.FlatDarkPurpleIJTheme;
import factory.ConnectionFactory;
import java.awt.Color;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import model.dao.ClientesDao;
import model.entities.Cliente;
import model.dao.ClientesDao;



/**
 *
 * @author migue
 */
public class gerenciarCliente2 extends javax.swing.JFrame {

    /**
     * Creates new form gerenciarCliente2
     */
    public gerenciarCliente2() {
        initComponents();
        exibirDados();
        setTitle("Aluguel de carros ");
        JRootPane rootPane;
        rootPane = SwingUtilities.getRootPane(this);
        rootPane.setWindowDecorationStyle(JRootPane.FRAME);
        JLayeredPane layeredPane = rootPane.getLayeredPane();
        layeredPane.setBackground(Color.RED);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        tabelaCliente.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
        int selectedRow = tabelaCliente.getSelectedRow();
        if (selectedRow != -1) {
        tfnome.setText(tabelaCliente.getValueAt(selectedRow, 0).toString());
        tfend.setText(tabelaCliente.getValueAt(selectedRow, 1).toString());
        tffone.setText(tabelaCliente.getValueAt(selectedRow, 2).toString());
        
            }
        }

    });
        lblmenu.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            voltarTelaPrincipal();
        }
        });
 }
    
    private Connection con;
    private Statement st;
    private ResultSetMetaData metaData;
    private ResultSet rs;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        GERENCIAR2 = new javax.swing.JLabel();
        tfend = new javax.swing.JTextField();
        tfnome = new javax.swing.JTextField();
        tffone = new javax.swing.JTextField();
        ADICIONAR2 = new javax.swing.JButton();
        EXCLUIR2 = new javax.swing.JButton();
        EDITAR2 = new javax.swing.JButton();
        LIMPAR2 = new javax.swing.JButton();
        txtnome = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaCliente = new javax.swing.JTable();
        lblmenu = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        GERENCIAR2.setFont(new java.awt.Font("Microsoft YaHei", 1, 24)); // NOI18N
        GERENCIAR2.setText("Gerenciar Cliente");

        tffone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tffoneActionPerformed(evt);
            }
        });

        ADICIONAR2.setText("ADICIONAR");
        ADICIONAR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADICIONAR2ActionPerformed(evt);
            }
        });

        EXCLUIR2.setText("EXCLUIR");
        EXCLUIR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EXCLUIR2ActionPerformed(evt);
            }
        });

        EDITAR2.setText("EDITAR");
        EDITAR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EDITAR2ActionPerformed(evt);
            }
        });

        LIMPAR2.setText("LIMPAR CAMPOS");
        LIMPAR2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LIMPAR2ActionPerformed(evt);
            }
        });

        txtnome.setText("NOME");

        jLabel11.setText("ENDERECO");

        jLabel12.setText("TELEFONE");

        tabelaCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "ID", "NOME", "ENDERECO", "TELEFONE"
            }
        ));
        jScrollPane3.setViewportView(tabelaCliente);

        lblmenu.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblmenu.setText("<");
        lblmenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblmenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblmenuMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblmenu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtnome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(GERENCIAR2)
                        .addGap(271, 271, 271))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(tfnome, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ADICIONAR2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                    .addComponent(EDITAR2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(EXCLUIR2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(LIMPAR2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tfend, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel11))
                                    .addGap(63, 63, 63)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel12)
                                        .addComponent(tffone, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGap(93, 93, 93)))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GERENCIAR2)
                    .addComponent(lblmenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtnome)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfnome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tffone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EXCLUIR2)
                    .addComponent(LIMPAR2)
                    .addComponent(ADICIONAR2)
                    .addComponent(EDITAR2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(103, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
 
    private void LIMPAR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LIMPAR2ActionPerformed

    tffone.setText("");  
    tfend.setText("");  
    tfnome.setText("");  
    }//GEN-LAST:event_LIMPAR2ActionPerformed

    private void ADICIONAR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADICIONAR2ActionPerformed
    Cliente clientes = new Cliente();
    ClientesDao dao;
    boolean sts;
    clientes.setNome(tfnome.getText());
    clientes.setEndereco(tfend.getText());
    clientes.setTelefone(tffone.getText());
 


    dao = new ClientesDao();

    try {
        if (!ConnectionFactory.getConnectionb()) {
            JOptionPane.showMessageDialog(null, "Erro na conexão com o banco de dados");
        } else {
            if (dao.salvar(clientes)) {
                JOptionPane.showMessageDialog(null, "Dados inseridos com sucesso!");
            } else {
                JOptionPane.showMessageDialog(null, "Não foi possível salvar os dados do carro");
            }

            dao.atualizarTabela((DefaultTableModel) tabelaCliente.getModel());
            tabelaCliente.revalidate();
            tabelaCliente.repaint();
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Erro ao atualizar a tabela de Clientes");
    }
    }//GEN-LAST:event_ADICIONAR2ActionPerformed

    private void EXCLUIR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EXCLUIR2ActionPerformed
        int selectedRow = tabelaCliente.getSelectedRow(); // Obtém a linha selecionada

        if (selectedRow != -1) { // Verifica se alguma linha foi selecionada
            String id = tabelaCliente.getValueAt(selectedRow, 0).toString(); // Obtém o valor da coluna "ID" da linha selecionada

            int confirm = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja excluir o carro com a id: " + id + "?", "Excluir Carro", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) { // Confirmação do usuário
                ClientesDao dao = new ClientesDao();

                try {
                    if (!ConnectionFactory.getConnectionb()) {
                        JOptionPane.showMessageDialog(null, "Erro na conexão com o banco de dados");
                    } else {
                        if (dao.excluirCliente(id)) { 
                            JOptionPane.showMessageDialog(null, "Cliente excluído com sucesso!");
                            DefaultTableModel model = (DefaultTableModel) tabelaCliente.getModel();
                            model.removeRow(selectedRow); // Remove a linha da tabela
                        } else {
                            JOptionPane.showMessageDialog(null, "Não foi possível excluir o Cliente");
                        }
                    }
                } catch (HeadlessException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Erro ao excluir o cliente");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Selecione um Cliente para excluir");
        }

    }//GEN-LAST:event_EXCLUIR2ActionPerformed

    private void tffoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tffoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tffoneActionPerformed

    private void EDITAR2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EDITAR2ActionPerformed
    ClientesDao dao = new ClientesDao();
    int selectedRow = tabelaCliente.getSelectedRow();

if (selectedRow != -1) {
    String id = tabelaCliente.getValueAt(selectedRow, 0).toString();
    String novoNome = tfnome.getText();
    String novoEndereco = tfend.getText();
    String novoTelefone = tffone.getText();

    if (!ConnectionFactory.getConnectionb()) {
        JOptionPane.showMessageDialog(null, "Erro na conexão com o banco de dados");
        return;
    }

    try {
        if (dao.editarCliente(id, novoNome, novoEndereco, novoTelefone)) {
            JOptionPane.showMessageDialog(null, "Dados editados com sucesso!");
            DefaultTableModel model = (DefaultTableModel) tabelaCliente.getModel();
            model.setValueAt(novoNome, selectedRow, 1);
            model.setValueAt(novoEndereco, selectedRow, 2);
            model.setValueAt(novoTelefone, selectedRow, 3);
            tabelaCliente.clearSelection();
            tfnome.setText("");
            tfend.setText("");
            tffone.setText("");
        } else {
            JOptionPane.showMessageDialog(null, "Não foi possível editar os dados do cliente");
        }
    } catch (HeadlessException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Erro ao editar os dados do cliente");
    }
} else {
    JOptionPane.showMessageDialog(null, "Selecione um cliente para editar");
}
    }//GEN-LAST:event_EDITAR2ActionPerformed

    private void lblmenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblmenuMouseClicked

    }//GEN-LAST:event_lblmenuMouseClicked
    
    public void exibirDados() {
        try {
            con = ConnectionFactory.getConnection();
            st = con.createStatement();
            rs = st.executeQuery("SELECT * FROM clientes");
            tabelaCliente.setModel(resultSetToTableModel(rs));
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    // Método para adaptar a tabela ao banco de dados
    public DefaultTableModel resultSetToTableModel(ResultSet rs) throws SQLException {
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        // Obter os nomes das colunas
        String[] columnNames = new String[columnCount];
        for (int column = 1; column <= columnCount; column++) {
            columnNames[column - 1] = metaData.getColumnName(column);
        }

        // Criar o modelo de tabela vazio
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        // Preencher o modelo de tabela com os dados do ResultSet
        while (rs.next()) {
            Object[] rowData = new Object[columnCount];
            for (int column = 1; column <= columnCount; column++) {
                rowData[column - 1] = rs.getObject(column);
            }
            model.addRow(rowData);
        }

        return model;
    }
    
    private void voltarTelaPrincipal() {
    TelaPrincipal telaPrincipal = new TelaPrincipal();
    telaPrincipal.setVisible(true);
    this.dispose(); // Fecha a janela atual
}
    
public static void main(String args[]) {
         try {
    UIManager.setLookAndFeel( new FlatDarkPurpleIJTheme());
    } catch( Exception ex ) {
    System.err.println( "Failed to initialize LaF" );
}
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gerenciarCliente2().setVisible(true);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADICIONAR2;
    private javax.swing.JButton EDITAR2;
    private javax.swing.JButton EXCLUIR2;
    private javax.swing.JLabel GERENCIAR2;
    private javax.swing.JButton LIMPAR2;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblmenu;
    private javax.swing.JTable tabelaCliente;
    private javax.swing.JTextField tfend;
    private javax.swing.JTextField tffone;
    private javax.swing.JTextField tfnome;
    private javax.swing.JLabel txtnome;
    // End of variables declaration//GEN-END:variables
}
